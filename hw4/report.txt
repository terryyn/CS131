The case I choose for performance difference is
(
  4,
  [
   +(6, [[1|1], [1|2], [2|1]]),
   *(96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),
   -(1, [3|1], [3|2]),
   -(1, [4|1], [4|2]),
   +(8, [[3|3], [4|3], [4|4]]),
   *(2, [[3|4]])
  ],
  T
), write(T), nl, fail.
kenken(with finite domain sovler):
   user   time       0.009 sec      
   system time       0.004 sec     
   cpu    time       0.013 sec     
   real   time     163.059 sec  

plain_kenken(wihtout finite domain solver):
   user   time       5.306 sec
   system time       0.002 sec
   cpu    time       5.308 sec
   real   time     201.468 sec

The performance of kenken is nearly 400x better
than plain_kenken in the testcase.




noop_kenken(N,C,T,O) :
N: the integer specifying the number of cells on each side
C: the list of blocks that are in the same block
T: a list of list of integers that represents the matching whole grid
O: list of matching operators added to the noop which makes it work


noop_testcase1 = (2,[(2,[[1|1],[2|2]]),(1,[[1|2],[2|1]])]).
?- noop_testcae1(N,C),noop_kenken(N,C,T,O).
should output:
N = 6
C = [(2,[[1|1],[2|2]]),(1,[[1|2],[2|1]])]
T = [[1,2],[2,1]]
O = [+,/]?
and if you respond with a ";" the next result should be "no".

noop_testcase2 = (2,[(2,[[1|1],[2|1]]),(3,[[1|2],[2|2]])]).
?- noop_tesecase2(N,C), noop_kenken(N,C,T,O),write(T),write(O),nl,fail.
should output
[[1,2],[2,1]] [*,+]
[[2,1],[1,2]] [*,+]
[[1,2],[2,1]] [/,+]
[[2,1],[1,2]] [/,+]
